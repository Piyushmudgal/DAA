/*Cut Rods of Even Length only
If a company decides to cut only rods of even size, given the length of the rod and price of each size, 
modify your dynamic programming code (both top-down and bottom-up) to find the maximum revenue that shall be generated. 
There is no penalty for wastage.

Input Format

First line contains the length of the rod, n

Next line contains the price of rods of each length from 1 to n separated by a space

Output Format

Maximum revenue that may be generated by cutting rod into rods of even length*/
#include<iostream>
#include<limits.h>
#include<vector>
using namespace std;
int bottomUPFindMaxEvenRod(vector<int> arr, int length)
{
    vector<int> r(length+1);
    r[0]=0;
    r[1]=0;
    for(int j = 2;j<=length;j++)
    {
        int q=INT_MIN;
        for(int i = 2;i<=j;i+=2)
        {
            if(q<(arr[i-1]+r[j-i]))
                q=arr[i-1]+r[j-i];
        }
        r[j]=q;
    }
    return r[length];
}
int topDownHelper(vector<int> p, vector<int> r, int n)
{
    if(r[n]>=0)
        return r[n];
    int q;
    if(n==0 || n==1)
        q=0;
    else
        q=INT_MIN;
    for(int i=2;i<=n;i+=2)
    {
        q=max(q,p[i-1]+topDownHelper(p,r,n-i));
    }
    r[n]=q;
    // cout<<r[n]<<endl;
    return q;
}
int topDownFindMaxEvenRod(vector<int> arr, int length){
    vector<int> r(length+1);
    for (int i = 0; i < r.size(); i++)
        r[i]=INT_MIN;  
    return topDownHelper(arr,r,length);
}


int main()
{
    int n,d;
    cin>>n;
    vector<int> arr;
    for(int i=0;i<n;i++)
    {
        cin>>d;
        arr.push_back(d);
    }
    cout<<topDownFindMaxEvenRod(arr, n);
}